ty Wrapper
	x: i32
	y: Y.InnerWrapper

	ty InnerWrapper = x y z w: i8
        ty VeryInner = opaque
            identity.* x: i8 = x

            twentySeven.* = 27

		getZ.* i: Y = Y.VeryInner.identity i.z

	new.* i: &Y = i

	unwrap.! = Y.InnerWrapper.getZ i.y

	test.* i: &Y = (Y.new i).x

twentySeven = Wrapper.InnerWrapper.VeryInner.twentySeven

* An example from README.md
ty Wrapper2 = x: Y.InnerWrapper
    ty InnerWrapper = x: i32

    unwrap.& = i.x.x

ty Opaque = opaque

* Is needed because otherwise cunning LLVM will cut `Opaque` out
foo x: Opaque -> Opaque = extern

puts str: *u8 -> i32 = extern

pass = ()

* Sadly not smart enough to infer the type of the function on its own
fib n: u64 -> u64 = if n == 0 or n == 1 do 1 else (fib n - 1) + fib n - 2

identity x: i32 = x

drop x: [i32 x 4] = pass

* `as` is a special operator which works if the type has method `from` on it
* For example, `a as T` is equivalent to `T::from(a)`
* asPtr.& [i8 x 14] = i as *[i8 x 14] as *i8

* "Hallo".asPtr

add x y: u8 = x + y

* ************ *
* `copy` influences only move semantics, automatic cloning and dropping.
* It does NOT influence usages of `alloca` instruction to create the value!!!
* ************ *
